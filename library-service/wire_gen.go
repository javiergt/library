// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/javiergt/library"
	"github.com/javiergt/library/library-service/internal/models"
	"github.com/jinzhu/gorm"
	"google.golang.org/grpc"
)

import (
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

// Injectors from wire.go:

func InitializeLibraryServer(dialect sqlDialect, connectionString sqlConnectionString, authServiceUrl grpcAuthServiceUrl, opts []grpc.DialOption) (*LibraryService, func(), error) {
	db, cleanup, err := provideDb(dialect, connectionString)
	if err != nil {
		return nil, nil, err
	}
	authServiceClient, cleanup2, err := provideAuthServiceClient(authServiceUrl, opts...)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	libraryService := NewLibraryService(db, authServiceClient)
	return libraryService, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type sqlDialect string

type sqlConnectionString string

func provideDb(dialect sqlDialect, connectionString sqlConnectionString) (*gorm.DB, func(), error) {
	db, err := gorm.Open(string(dialect), string(connectionString))
	if err != nil {
		return nil, nil, err
	}
	models.Migrate(db)

	cleanup := func() {
		db.Close()
	}

	return db, cleanup, nil
}

type grpcAuthServiceUrl string

func provideAuthServiceClient(authServiceUrl grpcAuthServiceUrl, opts ...grpc.DialOption) (library.AuthServiceClient, func(), error) {
	conn, err := grpc.Dial(string(authServiceUrl), opts...)

	if err != nil {
		return nil, nil, err
	}

	cleanup := func() {
		conn.Close()
	}

	c := library.NewAuthServiceClient(conn)

	return c, cleanup, nil
}
